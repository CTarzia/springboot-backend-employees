import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-02-10T08:52:52.167-03:00[America/Argentina/Buenos_Aires]
 * <br>
 * The generated test suite contains 7 tests
 * <br>
 * Covered targets: 120
 * <br>
 * Used time: 6h 0m 0s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new org.evomaster.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'swagger'", containsString("2.0"))
                .body("'info'.'description'", containsString("Api Documentation"))
                .body("'info'.'version'", containsString("1.0"))
                .body("'info'.'title'", containsString("Api Documentation"))
                .body("'info'.'termsOfService'", containsString("urn:tos"))
                .body("'info'.'contact'.isEmpty()", is(true))
                .body("'info'.'license'.'name'", containsString("Apache 2.0"))
                .body("'info'.'license'.'url'", containsString("http://www.apache.org/licenses/LICENSE-2.0"))
                .body("'basePath'", containsString("/"))
                .body("'tags'.size()", equalTo(2))
                .body("'tags'[0].'name'", containsString("basic-error-controller"))
                .body("'tags'[0].'description'", containsString("Basic Error Controller"))
                .body("'tags'[1].'name'", containsString("employee-controller"))
                .body("'tags'[1].'description'", containsString("Employee Controller"))
                .body("'paths'.'/employees'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/employees'.'get'.'tags'", hasItems("employee-controller"))
                .body("'paths'.'/employees'.'get'.'summary'", containsString("getAllEmployees"))
                .body("'paths'.'/employees'.'get'.'operationId'", containsString("getAllEmployeesUsingGET"))
                .body("'paths'.'/employees'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/employees'.'get'.'produces'", hasItems("*/*"))
                .body("'paths'.'/employees'.'get'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/employees'.'get'.'responses'.'200'.'schema'.'type'", containsString("array"))
                .body("'paths'.'/employees'.'get'.'responses'.'200'.'schema'.'items'.'$ref'", containsString("#/definitions/Employee"))
                .body("'paths'.'/employees'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/employees'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/employees'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/employees'.'post'.'tags'.size()", equalTo(1))
                .body("'paths'.'/employees'.'post'.'tags'", hasItems("employee-controller"))
                .body("'paths'.'/employees'.'post'.'summary'", containsString("createEmployee"))
                .body("'paths'.'/employees'.'post'.'operationId'", containsString("createEmployeeUsingPOST"))
                .body("'paths'.'/employees'.'post'.'consumes'.size()", equalTo(1))
                .body("'paths'.'/employees'.'post'.'consumes'", hasItems("application/json"))
                .body("'paths'.'/employees'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/employees'.'post'.'produces'", hasItems("*/*"))
                .body("'paths'.'/employees'.'post'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/employees'.'post'.'parameters'[0].'in'", containsString("body"))
                .body("'paths'.'/employees'.'post'.'parameters'[0].'name'", containsString("employee"))
                .body("'paths'.'/employees'.'post'.'parameters'[0].'description'", containsString("employee"))
                .body("'paths'.'/employees'.'post'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/employees'.'post'.'parameters'[0].'schema'.'$ref'", containsString("#/definitions/Employee"))
                .body("'paths'.'/employees'.'post'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/employees'.'post'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/Employee"))
                .body("'paths'.'/employees'.'post'.'responses'.'201'.'description'", containsString("Created"))
                .body("'paths'.'/employees'.'post'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/employees'.'post'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/employees'.'post'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/employees'.'delete'.'tags'.size()", equalTo(1))
                .body("'paths'.'/employees'.'delete'.'tags'", hasItems("employee-controller"))
                .body("'paths'.'/employees'.'delete'.'summary'", containsString("deleteAllEmployees"))
                .body("'paths'.'/employees'.'delete'.'operationId'", containsString("deleteAllEmployeesUsingDELETE"))
                .body("'paths'.'/employees'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/employees'.'delete'.'produces'", hasItems("*/*"))
                .body("'paths'.'/employees'.'delete'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/employees'.'delete'.'responses'.'200'.'schema'.'type'", containsString("object"))
                .body("'paths'.'/employees'.'delete'.'responses'.'200'.'schema'.'additionalProperties'.'type'", containsString("boolean"))
                .body("'paths'.'/employees'.'delete'.'responses'.'204'.'description'", containsString("No Content"))
                .body("'paths'.'/employees'.'delete'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/employees'.'delete'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/employees/{id}'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/employees/{id}'.'get'.'tags'", hasItems("employee-controller"))
                .body("'paths'.'/employees/{id}'.'get'.'summary'", containsString("getEmployeeById"))
                .body("'paths'.'/employees/{id}'.'get'.'operationId'", containsString("getEmployeeByIdUsingGET"))
                .body("'paths'.'/employees/{id}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/employees/{id}'.'get'.'produces'", hasItems("*/*"))
                .body("'paths'.'/employees/{id}'.'get'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/employees/{id}'.'get'.'parameters'[0].'name'", containsString("id"))
                .body("'paths'.'/employees/{id}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/employees/{id}'.'get'.'parameters'[0].'description'", containsString("id"))
                .body("'paths'.'/employees/{id}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/employees/{id}'.'get'.'parameters'[0].'type'", containsString("integer"))
                .body("'paths'.'/employees/{id}'.'get'.'parameters'[0].'format'", containsString("int64"))
                .body("'paths'.'/employees/{id}'.'get'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/employees/{id}'.'get'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/Employee"))
                .body("'paths'.'/employees/{id}'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/employees/{id}'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/employees/{id}'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/employees/{id}'.'put'.'tags'.size()", equalTo(1))
                .body("'paths'.'/employees/{id}'.'put'.'tags'", hasItems("employee-controller"))
                .body("'paths'.'/employees/{id}'.'put'.'summary'", containsString("updateEmployee"))
                .body("'paths'.'/employees/{id}'.'put'.'operationId'", containsString("updateEmployeeUsingPUT"))
                .body("'paths'.'/employees/{id}'.'put'.'consumes'.size()", equalTo(1))
                .body("'paths'.'/employees/{id}'.'put'.'consumes'", hasItems("application/json"))
                .body("'paths'.'/employees/{id}'.'put'.'produces'.size()", equalTo(1))
                .body("'paths'.'/employees/{id}'.'put'.'produces'", hasItems("*/*"))
                .body("'paths'.'/employees/{id}'.'put'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/employees/{id}'.'put'.'parameters'[0].'in'", containsString("body"))
                .body("'paths'.'/employees/{id}'.'put'.'parameters'[0].'name'", containsString("employeeDetails"))
                .body("'paths'.'/employees/{id}'.'put'.'parameters'[0].'description'", containsString("employeeDetails"))
                .body("'paths'.'/employees/{id}'.'put'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/employees/{id}'.'put'.'parameters'[0].'schema'.'$ref'", containsString("#/definitions/Employee"))
                .body("'paths'.'/employees/{id}'.'put'.'parameters'[1].'name'", containsString("id"))
                .body("'paths'.'/employees/{id}'.'put'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/employees/{id}'.'put'.'parameters'[1].'description'", containsString("id"))
                .body("'paths'.'/employees/{id}'.'put'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/employees/{id}'.'put'.'parameters'[1].'type'", containsString("integer"))
                .body("'paths'.'/employees/{id}'.'put'.'parameters'[1].'format'", containsString("int64"))
                .body("'paths'.'/employees/{id}'.'put'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/employees/{id}'.'put'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/Employee"))
                .body("'paths'.'/employees/{id}'.'put'.'responses'.'201'.'description'", containsString("Created"))
                .body("'paths'.'/employees/{id}'.'put'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/employees/{id}'.'put'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/employees/{id}'.'put'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/employees/{id}'.'delete'.'tags'.size()", equalTo(1))
                .body("'paths'.'/employees/{id}'.'delete'.'tags'", hasItems("employee-controller"))
                .body("'paths'.'/employees/{id}'.'delete'.'summary'", containsString("deleteEmployee"))
                .body("'paths'.'/employees/{id}'.'delete'.'operationId'", containsString("deleteEmployeeUsingDELETE"))
                .body("'paths'.'/employees/{id}'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/employees/{id}'.'delete'.'produces'", hasItems("*/*"))
                .body("'paths'.'/employees/{id}'.'delete'.'parameters'.size()", equalTo(1))
                .body("'paths'.'/employees/{id}'.'delete'.'parameters'[0].'name'", containsString("id"))
                .body("'paths'.'/employees/{id}'.'delete'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/employees/{id}'.'delete'.'parameters'[0].'description'", containsString("id"))
                .body("'paths'.'/employees/{id}'.'delete'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/employees/{id}'.'delete'.'parameters'[0].'type'", containsString("integer"))
                .body("'paths'.'/employees/{id}'.'delete'.'parameters'[0].'format'", containsString("int64"))
                .body("'paths'.'/employees/{id}'.'delete'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/employees/{id}'.'delete'.'responses'.'200'.'schema'.'type'", containsString("object"))
                .body("'paths'.'/employees/{id}'.'delete'.'responses'.'200'.'schema'.'additionalProperties'.'type'", containsString("boolean"))
                .body("'paths'.'/employees/{id}'.'delete'.'responses'.'204'.'description'", containsString("No Content"))
                .body("'paths'.'/employees/{id}'.'delete'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/employees/{id}'.'delete'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/enabledEndpoints'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/enabledEndpoints'.'get'.'tags'", hasItems("employee-controller"))
                .body("'paths'.'/enabledEndpoints'.'get'.'summary'", containsString("getEnabledEndpoints"))
                .body("'paths'.'/enabledEndpoints'.'get'.'operationId'", containsString("getEnabledEndpointsUsingGET"))
                .body("'paths'.'/enabledEndpoints'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/enabledEndpoints'.'get'.'produces'", hasItems("*/*"))
                .body("'paths'.'/enabledEndpoints'.'get'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/enabledEndpoints'.'get'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/RestActionsDto"))
                .body("'paths'.'/enabledEndpoints'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/enabledEndpoints'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/enabledEndpoints'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/error'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/error'.'get'.'tags'", hasItems("basic-error-controller"))
                .body("'paths'.'/error'.'get'.'summary'", containsString("errorHtml"))
                .body("'paths'.'/error'.'get'.'operationId'", containsString("errorHtmlUsingGET"))
                .body("'paths'.'/error'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/error'.'get'.'produces'", hasItems("text/html"))
                .body("'paths'.'/error'.'get'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/error'.'get'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/ModelAndView"))
                .body("'paths'.'/error'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/error'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/error'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/error'.'head'.'tags'.size()", equalTo(1))
                .body("'paths'.'/error'.'head'.'tags'", hasItems("basic-error-controller"))
                .body("'paths'.'/error'.'head'.'summary'", containsString("errorHtml"))
                .body("'paths'.'/error'.'head'.'operationId'", containsString("errorHtmlUsingHEAD"))
                .body("'paths'.'/error'.'head'.'consumes'.size()", equalTo(1))
                .body("'paths'.'/error'.'head'.'consumes'", hasItems("application/json"))
                .body("'paths'.'/error'.'head'.'produces'.size()", equalTo(1))
                .body("'paths'.'/error'.'head'.'produces'", hasItems("text/html"))
                .body("'paths'.'/error'.'head'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/error'.'head'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/ModelAndView"))
                .body("'paths'.'/error'.'head'.'responses'.'204'.'description'", containsString("No Content"))
                .body("'paths'.'/error'.'head'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/error'.'head'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/error'.'post'.'tags'.size()", equalTo(1))
                .body("'paths'.'/error'.'post'.'tags'", hasItems("basic-error-controller"))
                .body("'paths'.'/error'.'post'.'summary'", containsString("errorHtml"))
                .body("'paths'.'/error'.'post'.'operationId'", containsString("errorHtmlUsingPOST"))
                .body("'paths'.'/error'.'post'.'consumes'.size()", equalTo(1))
                .body("'paths'.'/error'.'post'.'consumes'", hasItems("application/json"))
                .body("'paths'.'/error'.'post'.'produces'.size()", equalTo(1))
                .body("'paths'.'/error'.'post'.'produces'", hasItems("text/html"))
                .body("'paths'.'/error'.'post'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/error'.'post'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/ModelAndView"))
                .body("'paths'.'/error'.'post'.'responses'.'201'.'description'", containsString("Created"))
                .body("'paths'.'/error'.'post'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/error'.'post'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/error'.'post'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/error'.'put'.'tags'.size()", equalTo(1))
                .body("'paths'.'/error'.'put'.'tags'", hasItems("basic-error-controller"))
                .body("'paths'.'/error'.'put'.'summary'", containsString("errorHtml"))
                .body("'paths'.'/error'.'put'.'operationId'", containsString("errorHtmlUsingPUT"))
                .body("'paths'.'/error'.'put'.'consumes'.size()", equalTo(1))
                .body("'paths'.'/error'.'put'.'consumes'", hasItems("application/json"))
                .body("'paths'.'/error'.'put'.'produces'.size()", equalTo(1))
                .body("'paths'.'/error'.'put'.'produces'", hasItems("text/html"))
                .body("'paths'.'/error'.'put'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/error'.'put'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/ModelAndView"))
                .body("'paths'.'/error'.'put'.'responses'.'201'.'description'", containsString("Created"))
                .body("'paths'.'/error'.'put'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/error'.'put'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/error'.'put'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/error'.'delete'.'tags'.size()", equalTo(1))
                .body("'paths'.'/error'.'delete'.'tags'", hasItems("basic-error-controller"))
                .body("'paths'.'/error'.'delete'.'summary'", containsString("errorHtml"))
                .body("'paths'.'/error'.'delete'.'operationId'", containsString("errorHtmlUsingDELETE"))
                .body("'paths'.'/error'.'delete'.'produces'.size()", equalTo(1))
                .body("'paths'.'/error'.'delete'.'produces'", hasItems("text/html"))
                .body("'paths'.'/error'.'delete'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/error'.'delete'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/ModelAndView"))
                .body("'paths'.'/error'.'delete'.'responses'.'204'.'description'", containsString("No Content"))
                .body("'paths'.'/error'.'delete'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/error'.'delete'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/error'.'options'.'tags'.size()", equalTo(1))
                .body("'paths'.'/error'.'options'.'tags'", hasItems("basic-error-controller"))
                .body("'paths'.'/error'.'options'.'summary'", containsString("errorHtml"))
                .body("'paths'.'/error'.'options'.'operationId'", containsString("errorHtmlUsingOPTIONS"))
                .body("'paths'.'/error'.'options'.'consumes'.size()", equalTo(1))
                .body("'paths'.'/error'.'options'.'consumes'", hasItems("application/json"))
                .body("'paths'.'/error'.'options'.'produces'.size()", equalTo(1))
                .body("'paths'.'/error'.'options'.'produces'", hasItems("text/html"))
                .body("'paths'.'/error'.'options'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/error'.'options'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/ModelAndView"))
                .body("'paths'.'/error'.'options'.'responses'.'204'.'description'", containsString("No Content"))
                .body("'paths'.'/error'.'options'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/error'.'options'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/error'.'patch'.'tags'.size()", equalTo(1))
                .body("'paths'.'/error'.'patch'.'tags'", hasItems("basic-error-controller"))
                .body("'paths'.'/error'.'patch'.'summary'", containsString("errorHtml"))
                .body("'paths'.'/error'.'patch'.'operationId'", containsString("errorHtmlUsingPATCH"))
                .body("'paths'.'/error'.'patch'.'consumes'.size()", equalTo(1))
                .body("'paths'.'/error'.'patch'.'consumes'", hasItems("application/json"))
                .body("'paths'.'/error'.'patch'.'produces'.size()", equalTo(1))
                .body("'paths'.'/error'.'patch'.'produces'", hasItems("text/html"))
                .body("'paths'.'/error'.'patch'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/error'.'patch'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/ModelAndView"))
                .body("'paths'.'/error'.'patch'.'responses'.'204'.'description'", containsString("No Content"))
                .body("'paths'.'/error'.'patch'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/error'.'patch'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'definitions'.'Employee'.'type'", containsString("object"))
                .body("'definitions'.'Employee'.'properties'.'emailId'.'type'", containsString("string"))
                .body("'definitions'.'Employee'.'properties'.'firstName'.'type'", containsString("string"))
                .body("'definitions'.'Employee'.'properties'.'lastName'.'type'", containsString("string"))
                .body("'definitions'.'Employee'.'title'", containsString("Employee"))
                .body("'definitions'.'ModelAndView'.'type'", containsString("object"))
                .body("'definitions'.'ModelAndView'.'properties'.'empty'.'type'", containsString("boolean"))
                .body("'definitions'.'ModelAndView'.'properties'.'model'.'type'", containsString("object"))
                .body("'definitions'.'ModelAndView'.'properties'.'modelMap'.'type'", containsString("object"))
                .body("'definitions'.'ModelAndView'.'properties'.'modelMap'.'additionalProperties'.'type'", containsString("object"))
                .body("'definitions'.'ModelAndView'.'properties'.'reference'.'type'", containsString("boolean"))
                .body("'definitions'.'ModelAndView'.'properties'.'status'.'type'", containsString("string"))
                .body("'definitions'.'ModelAndView'.'properties'.'status'.'enum'.size()", equalTo(68))
                .body("'definitions'.'ModelAndView'.'properties'.'status'.'enum'", hasItems("ACCEPTED", "ALREADY_REPORTED", "BAD_GATEWAY", "BAD_REQUEST", "BANDWIDTH_LIMIT_EXCEEDED", "CHECKPOINT", "CONFLICT", "CONTINUE", "CREATED", "DESTINATION_LOCKED", "EXPECTATION_FAILED", "FAILED_DEPENDENCY", "FORBIDDEN", "FOUND", "GATEWAY_TIMEOUT", "GONE", "HTTP_VERSION_NOT_SUPPORTED", "IM_USED", "INSUFFICIENT_SPACE_ON_RESOURCE", "INSUFFICIENT_STORAGE", "INTERNAL_SERVER_ERROR", "I_AM_A_TEAPOT", "LENGTH_REQUIRED", "LOCKED", "LOOP_DETECTED", "METHOD_FAILURE", "METHOD_NOT_ALLOWED", "MOVED_PERMANENTLY", "MOVED_TEMPORARILY", "MULTIPLE_CHOICES", "MULTI_STATUS", "NETWORK_AUTHENTICATION_REQUIRED", "NON_AUTHORITATIVE_INFORMATION", "NOT_ACCEPTABLE", "NOT_EXTENDED", "NOT_FOUND", "NOT_IMPLEMENTED", "NOT_MODIFIED", "NO_CONTENT", "OK", "PARTIAL_CONTENT", "PAYLOAD_TOO_LARGE", "PAYMENT_REQUIRED", "PERMANENT_REDIRECT", "PRECONDITION_FAILED", "PRECONDITION_REQUIRED", "PROCESSING", "PROXY_AUTHENTICATION_REQUIRED", "REQUESTED_RANGE_NOT_SATISFIABLE", "REQUEST_ENTITY_TOO_LARGE", "REQUEST_HEADER_FIELDS_TOO_LARGE", "REQUEST_TIMEOUT", "REQUEST_URI_TOO_LONG", "RESET_CONTENT", "SEE_OTHER", "SERVICE_UNAVAILABLE", "SWITCHING_PROTOCOLS", "TEMPORARY_REDIRECT", "TOO_EARLY", "TOO_MANY_REQUESTS", "UNAUTHORIZED", "UNAVAILABLE_FOR_LEGAL_REASONS", "UNPROCESSABLE_ENTITY", "UNSUPPORTED_MEDIA_TYPE", "UPGRADE_REQUIRED", "URI_TOO_LONG", "USE_PROXY", "VARIANT_ALSO_NEGOTIATES"))
                .body("'definitions'.'ModelAndView'.'properties'.'view'.'$ref'", containsString("#/definitions/View"))
                .body("'definitions'.'ModelAndView'.'properties'.'viewName'.'type'", containsString("string"))
                .body("'definitions'.'ModelAndView'.'title'", containsString("ModelAndView"))
                .body("'definitions'.'RestActionDto'.'type'", containsString("object"))
                .body("'definitions'.'RestActionDto'.'properties'.'path'.'type'", containsString("string"))
                .body("'definitions'.'RestActionDto'.'properties'.'verb'.'type'", containsString("string"))
                .body("'definitions'.'RestActionDto'.'title'", containsString("RestActionDto"))
                .body("'definitions'.'RestActionsDto'.'type'", containsString("object"))
                .body("'definitions'.'RestActionsDto'.'properties'.'enabledRestActions'.'type'", containsString("array"))
                .body("'definitions'.'RestActionsDto'.'properties'.'enabledRestActions'.'uniqueItems'", equalTo(true))
                .body("'definitions'.'RestActionsDto'.'properties'.'enabledRestActions'.'items'.'$ref'", containsString("#/definitions/RestActionDto"))
                .body("'definitions'.'RestActionsDto'.'title'", containsString("RestActionsDto"))
                .body("'definitions'.'View'.'type'", containsString("object"))
                .body("'definitions'.'View'.'properties'.'contentType'.'type'", containsString("string"))
                .body("'definitions'.'View'.'title'", containsString("View"));
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'deleted'", equalTo(true));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"firstName\": \"_EM_7_XYZ_\", " + 
                    " \"lastName\": \"_EM_8_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/employees?EMextraParam123=_EM_9_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'firstName'", containsString("_EM_7_XYZ_"))
                .body("'lastName'", containsString("_EM_8_XYZ_"))
                .body("'emailId'", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        String location_employees = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 268 " + 
                    " } ")
                .post(baseUrlOfSut + "/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'firstName'", nullValue())
                .body("'lastName'", nullValue())
                .body("'emailId'", nullValue());
        location_employees = "/employees" + "/" + res_0.extract().body().path("id").toString();
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(resolveLocation(location_employees, baseUrlOfSut + "/employees/268?EMextraParam123=42"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'firstName'", nullValue())
                .body("'lastName'", nullValue())
                .body("'emailId'", nullValue());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        String location_employees = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"firstName\": \"_EM_24_XYZ_\", " + 
                    " \"id\": 372, " + 
                    " \"lastName\": \"m\" " + 
                    " } ")
                .post(baseUrlOfSut + "/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'firstName'", containsString("_EM_24_XYZ_"))
                .body("'lastName'", containsString("m"))
                .body("'emailId'", nullValue());
        location_employees = "/employees" + "/" + res_0.extract().body().path("id").toString();
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_employees, baseUrlOfSut + "/employees/372"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'deleted'", equalTo(true));
        
        expectationHandler.expect(ems);
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        String location_employees = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"emailId\": \"_EM_51_XYZ_\", " + 
                    " \"firstName\": \"zUrwZE8tv\", " + 
                    " \"lastName\": \"_EM_52_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/employees")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'firstName'", containsString("zUrwZE8tv"))
                .body("'lastName'", containsString("_EM_52_XYZ_"))
                .body("'emailId'", containsString("_EM_51_XYZ_"));
        location_employees = "/employees" + "/" + res_0.extract().body().path("id").toString();
        
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"emailId\": \"_EM_53_XYZ_\", " + 
                    " \"lastName\": \"_EM_55_XYZ_\" " + 
                    " } ")
                .put(resolveLocation(location_employees, baseUrlOfSut + "/employees/901"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'firstName'", nullValue())
                .body("'lastName'", containsString("_EM_55_XYZ_"))
                .body("'emailId'", containsString("_EM_53_XYZ_"));
        
    }


}
